#  Example Qudi configuration file.
#
#
#
# IMPORTANT: The format of every 'module.Class' line has changed on 28.6.2015.
# =========  The class name now needs to be explicitly given here in the config.
#		  the config line must the form package.module.Class.ClassName
global:
    # list of modules to load when starting
    startup: ['man', 'tray', 'tasklogic']

    serveraddress: localhost
    serverport: 12345

    ## For controlling the appearance of the GUI:
    stylesheet: 'qdark.qss'

hardware:

    nidaqcounter: #CounterTrace, Scanner, ODMR
        module.Class: 'national_instruments_x_series.NationalInstrumentsXSeries'
        photon_sources:
        - '/Dev1/PFI3'
        clock_channel: '/Dev2/Ctr1'
        default_clock_frequency:
        - 100
        counter_channels:
        - '/Dev2/Ctr0'
        counter_ai_channels: ''
        default_scanner_clock_frequency:
        - 100
        scanner_clock_channel: '/Dev1/Ctr1'
        odmr_trigger_channel: '/Dev2/PFI12'
        laser_ao: '/Dev1/ao3'
        counting_edge_rising: True
        gate_in_channel:
        - '/Dev1/PFI13'
        scanner_counter_channels:
        - '/Dev1/Ctr0'
        default_samples_number:
        - 50
        scanner_ao_channels:
        - '/Dev1/ao0'
        - '/Dev1/ao1'
        - '/Dev1/ao2'
        scanner_ai_channels: []
        scanner_voltage_ranges:
        - [0, 10]
        - [0, 10]
        - [0, 10]
        scanner_position_ranges:
        - [0e-6, 50e-6]
        - [0e-6, 50e-6]
        - [-25e-6, 25e-6]

    mykrowave:
        module.Class: 'microwave.mw_source_smiq.MicrowaveSmiq'
        gpib_address: 'GPIB0::29::INSTR'
        gpib_timeout: 60

    heater:
        module.Class: 'RundS_power_supply_NGPX_70-5.Power_supply'
        gpib_address: 'GPIB0::17::INSTR' ## {'x': 'gpib0::15', 'y': 'gpib0::16', 'z': 'gpib0::17'}
        gpib_timeout: 30

    SMC_controller:
        module.Class: 'magnet.SMC_controller.SMC'

    AWG5014C:
        module.Class: 'awg.tektronix_awg5014c.AWG5014C'
        tmp_work_dir: 'C:\\Users\\pi3\\Documents\\GitHub\\qudi\\saved_pulsed_assets'
        awg_visa_address: GPIB0::20::INSTR
        awg_ip_address: 129.69.46.166
        ftp_root_dir: 'C:\\inetpub\\ftproot'
        ftp_login: 'user'
        ftp_passwd: 'pass'
        default_sample_rate: 1.2
        timeout: 30

    fastcounter:
        module.Class: 'swabian_instruments.timetagger_fast_counter.TimeTaggerFastCounter'
        timetagger_channel_apd_0: 0
        timetagger_channel_apd_1: 0
        timetagger_channel_detect: 1
        timetagger_channel_sequence: 2
        timetagger_sum_channels: False

    laserquantum:
        module.Class: 'laser.laserquantum_laser.LaserQuantumLaser'
        interface: 'ASRL4::INSTR'
        maxpower: 0.2
        psu: 'SMD12'

    mydummyswitch1:
        module.Class: 'switches.switch_dummy.SwitchDummy'

    mydummyswitch2:
        module.Class: 'switches.switch_dummy.SwitchDummy'

    laserdummy:
        module.Class: 'laser.simple_laser_dummy.SimpleLaserDummy'

logic:

    counterlogic:
        module.Class: 'counter_logic.CounterLogic'
        connect:
            counter1: 'nidaqcounter'
            savelogic: 'save'

    scannerlogic:
        module.Class: 'confocal_logic.ConfocalLogic'
        connect:
            confocalscanner1: 'nidaqcounter'
            savelogic: 'save'

    poimanagerlogic:
        module.Class: 'poi_manager_logic.PoiManagerLogic'
        connect:
            scannerlogic: 'scannerlogic'
            optimizer1: 'optimizerlogic'
            savelogic: 'save'

    odmrlogic:
        module.Class: 'odmr_logic.ODMRLogic'
        scanmode: 'LIST'
        connect:
            odmrcounter: 'nidaqcounter'
            fitlogic: 'fit'
            microwave1: 'mykrowave'
            savelogic: 'save'
            taskrunner: 'tasklogic'
            pulsegenerator: 'AWG5014C'

    laserscanner:
        module.Class: 'laser_scanner_logic.LaserScannerLogic'
        connect:
            confocalscanner1: 'nidaqcounter'
            savelogic: 'save'

    scanner_tilt_interfuse:
        module.Class: 'interfuse.scanner_tilt_interfuse.ScannerTiltInterfuse'
        connect:
            confocalscanner1: 'nidaqcounter'

    magnet_control_logic:
        module.Class: 'magnet_control_logic.MagnetControlLogic'
        connect:
            counter: 'counterlogic'
            magnetstage: 'SMC_controller'
            savelogic: 'save'
            fitlogic: 'fit'

    qdplot:
        module.Class: 'qdplot_logic.QdplotLogic'
        connect:
            savelogic: 'save'

    pulsedmasterlogic:
        module.Class: 'pulsed.pulsed_master_logic.PulsedMasterLogic'
        connect:
            pulsedmeasurementlogic: 'pulsedmeasurementlogic'
            sequencegeneratorlogic: 'sequencegenerator'

    sequencegenerator:
        module.Class: 'pulsed.sequence_generator_logic.SequenceGeneratorLogic'
        assets_storage_path: C:\Users\pi3\Documents\GitHub\qudi\saved_pulsed_assets
        connect:
            pulsegenerator: 'AWG5014C'

    pulseextraction:
        module.Class: 'pulsed.pulse_extractor.PulseExtractor'

    pulseanalysis:
        module.Class: 'pulsed.pulse_analyzer.PulseAnalyzer'
        connect:
            fastcounter: 'fastcounter'
            pulseextractionlogic: 'pulseextraction'
            sequencegenerator: 'sequencegenerator'
            pulsegenerator: 'AWG5014C'

    pulsedmeasurementlogic:
        module.Class: 'pulsed.pulsed_measurement_logic.PulsedMeasurementLogic'
        connect:
            fitlogic: 'fit'
            savelogic: 'save'
            fastcounter: 'fastcounter'
            microwave: 'mykrowave'
            pulsegenerator: 'AWG5014C'

    optimizer:
        module.Class: 'optimizer_logic.OptimizerLogic'
        connect:
            confocalscanner1: 'scanner_tilt_interfuse'
            fitlogic: 'fit'

    poimanager:
        module.Class: 'poi_manager_logic.PoiManagerLogic'
        connect:
            scannerlogic: 'scannerlogic'
            optimizer1: 'optimizer'
            savelogic: 'save'

    fit:
        module.Class: 'fit_logic.FitLogic'

    save:
        module.Class: 'save_logic.SaveLogic'
        win_data_directory: 'G:\data\QudiData'
        unix_data_directory: '/$HOME/'
        log_into_daily_directory: True

    kernellogic:
        module.Class: 'jupyterkernel.kernellogic.QudiKernelLogic'
        remoteaccess: True

    tasklogic:
        module.Class: 'taskrunner.TaskRunner'
        tasks:
            scannerLocationRefocus:
                module: 'refocus'
                pausetasks:
                  - scan
                  - odmr
                needsmodules:
                    optimizer: 'optimizer'



gui:
    tray:
        module.Class: 'trayicon.TrayIcon'

    man:
        module.Class: 'manager.managergui.ManagerGui'

    countergui:
        module.Class: 'counter.countergui.CounterGui'
        connect:
            counterlogic1: 'counterlogic'

    confocalgui:
        module.Class: 'confocal.confocalgui.ConfocalGui'
        connect:
            confocallogic1: 'scannerlogic'
            savelogic: 'save'
            optimizerlogic1: 'optimizer'
        fixed_aspect_ratio_xy: True
        fixed_aspect_ratio_depth: True
        slider_stepsize: 0.001  # in micrometer
        image_x_padding: 0.02
        image_y_padding: 0.02
        image_z_padding: 0.02

    magnet:
        module.Class: 'magnet.Magnet_control.magnet_control_gui.MagnetControlGui'
        connect:
            magnetlogic1: 'magnet_control_logic'
            savelogic: 'save'

    odmr:
        module.Class: 'odmr.odmrgui.ODMRGui'
        connect:
            odmrlogic1: 'odmrlogic'
            savelogic: 'save'

    calculator:
        module.Class: 'magnetic_field_calculator.mf_calculator.CalculatorGui'

    poimanagergui:
        module.Class: 'poimanager.poimangui.PoiManagerGui'
        connect:
            poimanagerlogic1: 'poimanager'
            confocallogic1: 'scannerlogic'

    nv_depth_calculator:
        module.Class: 'analysis_methods.NV_depth_calculator.NVdepthGui'
        connect:
            savelogic: 'save'

    noise_spectrum_calculator:
        module.Class: 'analysis_methods.noise_spectrum.NoiseSpectrumGui'
        connect:
            savelogic: 'save'
            fitlogic: 'fit'

    pulsedmeasurement:
        module.Class: 'pulsed.pulsed_maingui.PulsedMeasurementGui'
        connect:
            pulsedmasterlogic: 'pulsedmasterlogic'

